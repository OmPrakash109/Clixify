* UserDetailsImpl: We created the 'UserDetailsImpl' class (by implementing 'UserDetails' interface) to bridge the gap/integrate our own custom representation of User with the Spring Security-compatible representation of User,
                   so that spring can understand what user to perform authentication and authorization on.


* UserDetailsServiceImpl: used to load the user details from the database.
                        - We created the 'UserDetailsServiceImpl' class (by implementing 'UserDetailsService interface) as we have our own custom representation of user and we might be storing it in any database like MySQL, MongoDB etc. depending on our requirement.
                         so we created this so that Spring Security can understand how to load the user details from the database for our custom user representation.
                         In our 'UserDetailsServiceImpl', We override the 'loadUserByUsername' method to load the user details from the database.
                         This class helps to load user details from the database and convert it to UserDetailsImpl object (by UserDetailsImpl.build(user)).



--------------
Now, we will work on 'register' endpoint which would allow user to register into our application.
For this, the service layer would be handling the request from controller and manage the authentication.
So we created UserService class to handle the request from controller and manage the authentication.


* UserService: Handles all business logic related to user management and authentication
  - User registration with validation and password hashing
  - User authentication and JWT token generation
  - User lookup by username/email
  - Role-based access control implementation
  - Works with Spring Security for authentication flow

* UrlMappingService: Manages URL shortening and analytics functionality
  - URL Shortening:
    - Generates unique short URLs (8-character alphanumeric)
    - Maps short URLs to original URLs with user association
    - Tracks creation timestamps and click counts
  - Analytics:
    - Tracks and aggregates click events by date
    - Provides per-URL click statistics
    - Generates user-specific analytics across all their URLs
  - Key Methods:
    - createShortUrl(): Generates and saves a new short URL
    - getUrlsByUser(): Retrieves all URLs for a specific user
    - getClickEventByDate(): Gets click analytics for a specific URL
    - getTotalClicksByUserAndDate(): Aggregates click data across user's URLs
  - Data Conversion:
    - Converts between entity and DTO objects
    - Handles date-based data aggregation
    - Manages relationships between URLs and click events



Service Layer Features:
- Transaction management for data consistency
- Business logic encapsulation
- Exception handling and validation
- Integration with repositories for data access
- DTO conversion for clean API contracts
- Performance optimization for analytics queries
