* UserDetailsImpl: We created the 'UserDetailsImpl' class (by implementing 'UserDetails' interface) to bridge the gap/integrate our own custom representation of User with the Spring Security-compatible representation of User,
                   so that spring can understand what user to perform authentication and authorization on.


* UserDetailsServiceImpl: used to load the user details from the database.
                        - We created the 'UserDetailsServiceImpl' class (by implementing 'UserDetailsService interface) as we have our own custom representation of user and we might be storing it in any database like MySQL, MongoDB etc. depending on our requirement.
                         so we created this so that Spring Security can understand how to load the user details from the database for our custom user representation.
                         In our 'UserDetailsServiceImpl', We override the 'loadUserByUsername' method to load the user details from the database.
                         This class helps to load user details from the database and convert it to UserDetailsImpl object (by UserDetailsImpl.build(user)).



--------------
After completing WebSecurityConfig class, we are done with security configuration.
Now, we will work on 'register' endpoint which would allow user to register into our application.
For this, the service layer would be handling the request from controller and manage the authentication.
So we created UserService class to handle the request from controller and manage the authentication.


* UserService: We created the 'UserService' class (annotated with @Service) to handle all the business logic related to user management and authentication in our application.
                    - It provides methods for user registration, where it takes the user details, validates them, hashes the password using BCrypt, and saves the user to the database through UserRepository.
                    - The service also includes methods to find users by username or email, which are used during authentication and for checking if a username/email already exists during registration.
                    - It works closely with Spring Security and UserDetailsService to handle user authentication and authorization, ensuring that only authenticated users can access protected endpoints based on their roles.


* UrlMappingService: handles the core business logic for URL shortening functionality.
                    - Contains methods for creating short URLs and converting between DTO and entity objects
                    - Implements the actual URL shortening algorithm in generateShortUrl()
                    - Manages the relationship between URLs and users
                    - Handles saving URL mappings to the database through UrlMappingRepository
