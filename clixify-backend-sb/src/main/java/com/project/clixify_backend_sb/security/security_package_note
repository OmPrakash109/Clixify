First we add the JWT authentication related classes in the 'security' package.
    - JwtUtils
    - JwtAuthenticationFilter
    - JwtAuthenticationResponse


After implelenting the JWT authentication related classes, we need do Custom Security Configuration that we do in 'WebSecurityConfig' class.


 In this WebSecurityConfig class:
    - We sets up the Spring Security Filter Chain (by making a method filterChain() which returns 'SecurityFilterChain' object) wherein,
        - We defines the security rules for handling HTTP requests based on paths and roles.
        - Add the JWTAuthenticationFilter to be used as a filter in the filter chain.
             As Spring Security recognizes JWTAuthenticationFilter as a filter that will only be executed once per request
             But by default, Spring Security doesn't automatically include our custom filter (JwtAuthenticationFilter) in the filter chain unless we explicitly add it to the filter chain.
             For this, we add JwtAuthenticationFilter @Bean in WebSecurityConfig class.
        - We also configure DaoAuthenticationProvider which Sets up how authentication is handled by Spring Security.
             And add the authenticationProvider @Bean (which returns 'DaoAuthenticationProvider' object) in the filterChain().
             We also configure passwordEncoder() method (which returns 'PasswordEncoder' object) and add it to daoAuthenticationProvider @Bean (as we can't store password as it is, first we encode before storing in database, by using BcryptPasswordEncoder for hashing)
             Along with passwordEncoder, we also inject userDetailsService() method (which returns 'UserDetailsServiceImpl' object) and add it to daoAuthenticationProvider @Bean, so that we can tell daoAuthenticationProvider that, hey! we load this user from database this way.
